Checkout Learning Experiment
- This is the beginning of an experiment in Checkout Learning, where we can more accurately show students the growth of thought process from start to finish - perhaps without the aid of video tutorials. 
- The idea is that we document our descriptions of the code/constituent modules as we develop them. This way, someone learning how to develop it from scratch can checkout a commit corresponding to a certain stage in development and understand how the codebase grew and why. 

TITLE: INSTRUCTION FETCH

At the time of starting this journaling, Iâ€™ve already implemented an instruction fetch mechanism and instruction memory. 

A note on this: in my memory model, each line is 32bits long, and my input address is line aligned - not byte aligned. I probably need to change this going forward. The implications of this are that my program counter now increments by 1 instead of by 4. Before the chip becomes too complicated, I should consider how to change that. 


TITLE: REGISTER FILE

A typical register file, as read from [1] and [2], seems to be one that provides the ability to read 2 registers simultaneously and write one register. This is the basic structure, and the reason for this is because your typical instruction - especially in RISCV ISA - will have two source registers to read from and one destination register to write to. Which is why the basic structure isn't just reading one register and writing another. 

[1] Digital Design and Computer Architecture by David M. Harris and Sarah L. Harris
[2] Lecture Notes [http://web.cse.ohio-state.edu/~teodorescu.1/download/teaching/cse675.au08/Cse675.02.E.MemoryDesign_part1.pdf] from Ohio State Univ 


TITLE: DECODE BLOCK
At this point, the decode block simply parses the instruction and separates out the different fields as provided in the RV32I opcode map. Based on my reading of the ISA, there are at most 3 operands to the execute/ALU block. So the decode block assigns the operands based on the opcode that it sees. 


Is this a future-proof decision? What if there's something that needs to operate on more than that? Let's stick with this for now and see if its worth changing the implementation later  
